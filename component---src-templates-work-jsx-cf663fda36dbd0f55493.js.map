{"version":3,"sources":["webpack:///./src/components/Aimage.jsx","webpack:///./src/templates/work.jsx"],"names":["image","title","link","className","href","src","alt","getImageUrl","url","includes","pageQuery","youtubeElem","detailLinkElem","detailBlogElem","data","location","work","worksJson","firstImageElem","Aimage","images","restOfImages","slice","youtube","allow","allowFullScreen","blog","to","detailElem","date","dangerouslySetInnerHTML","__html","desc","tools","tags","join","Layout","width","map","key"],"mappings":"8LAEe,kBAAGA,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,KAAjB,OACb,uBAAGC,UAAU,QAAQC,KAAMF,GAAQF,GACjC,yBAAKK,IAAKL,EAAOM,IAAKL,MCCpBM,EAAc,SAACC,GAAD,OAAUA,EAAIC,SAAS,QAAUD,EAAvB,cAA2CA,GAiF5DE,GA/EE,sBAAyB,IAYlCC,EAcAC,EAQAC,EAlCYC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAOF,EAAKG,UAEZC,EACJ,kBAACC,EAAD,CACEjB,KAAMc,EAAKd,KACXF,MAAOO,EAAYS,EAAKI,OAAO,IAC/BnB,MAAOe,EAAKf,QAGVoB,EAAeL,EAAKI,OAAOE,MAAM,GAGnCN,EAAKO,UACPZ,EACE,yBAAKR,UAAU,cACb,4BACEF,MAAM,UACNI,IAAG,iCAAmCW,EAAKO,QAAxC,oBACHC,MAAM,4BACNC,iBAAe,MAOnBT,EAAKd,OACPU,EACE,2BACE,uBAAGR,KAAMY,EAAKd,MAAd,cAKFc,EAAKU,OACPb,EACE,2BACGG,EAAKU,KAAKjB,SAAS,QAClB,uBAAGL,KAAMY,EAAKU,MAAd,eAEA,kBAAC,IAAD,CAAMC,GAAE,UAAYX,EAAKU,MAAzB,iBAKR,IAAME,EACJ,yBAAKzB,UAAU,UACb,4BAAKa,EAAKf,OACV,uBAAGE,UAAU,aAAaa,EAAKa,MAC/B,uBAAGC,wBAAyB,CAAEC,OAAQf,EAAKgB,QAC1CnB,EACAD,EACD,qCACA,2BAAII,EAAKiB,OACT,oCACA,2BAAIjB,EAAKkB,KAAKC,KAAK,QAIvB,OACE,kBAACC,EAAA,EAAD,CAAQrB,SAAUA,EAAUd,MAAOe,EAAKf,MAAOoC,MAAO,KACpD,yBAAKlC,UAAU,QACb,6BACGe,EACAU,EACAjB,EACAU,EAAaiB,KAAI,SAACtC,GAAD,OAChB,uBAAGG,UAAU,QAAQC,KAAMG,EAAYP,GAAQuC,IAAKvC,GAClD,yBAAKK,IAAKE,EAAYP,GAAQM,IAAKU,EAAKf,aAI7C2B,KAMa","file":"component---src-templates-work-jsx-cf663fda36dbd0f55493.js","sourcesContent":["import React from \"react\";\n\nexport default ({ image, title, link }) => (\n  <a className=\"image\" href={link || image}>\n    <img src={image} alt={title} />\n  </a>\n);\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/Layout\";\nimport Aimage from \"../components/Aimage\";\n\nconst getImageUrl = (url) => (url.includes(\"http\") ? url : `/portfolio/${url}`);\n\nexport default ({ data, location }) => {\n  const work = data.worksJson;\n\n  const firstImageElem = (\n    <Aimage\n      link={work.link}\n      image={getImageUrl(work.images[0])}\n      title={work.title}\n    />\n  );\n  const restOfImages = work.images.slice(1);\n\n  let youtubeElem;\n  if (work.youtube) {\n    youtubeElem = (\n      <div className=\"iframewrap\">\n        <iframe\n          title=\"Youtube\"\n          src={`https://www.youtube.com/embed/${work.youtube}?rel=0&showinfo=0`}\n          allow=\"autoplay; encrypted-media\"\n          allowFullScreen\n        />\n      </div>\n    );\n  }\n\n  let detailLinkElem;\n  if (work.link) {\n    detailLinkElem = (\n      <p>\n        <a href={work.link}>launch →</a>\n      </p>\n    );\n  }\n  let detailBlogElem;\n  if (work.blog) {\n    detailBlogElem = (\n      <p>\n        {work.blog.includes(\"http\") ? (\n          <a href={work.blog}>read more →</a>\n        ) : (\n          <Link to={`/posts/${work.blog}`}>read more →</Link>\n        )}\n      </p>\n    );\n  }\n  const detailElem = (\n    <div className=\"detail\">\n      <h1>{work.title}</h1>\n      <p className=\"secondary\">{work.date}</p>\n      <p dangerouslySetInnerHTML={{ __html: work.desc }} />\n      {detailBlogElem}\n      {detailLinkElem}\n      <h4>Tools</h4>\n      <p>{work.tools}</p>\n      <h4>Tags</h4>\n      <p>{work.tags.join(\", \")}</p>\n    </div>\n  );\n\n  return (\n    <Layout location={location} title={work.title} width={900}>\n      <div className=\"work\">\n        <div>\n          {firstImageElem}\n          {detailElem}\n          {youtubeElem}\n          {restOfImages.map((image) => (\n            <a className=\"image\" href={getImageUrl(image)} key={image}>\n              <img src={getImageUrl(image)} alt={work.title} />\n            </a>\n          ))}\n        </div>\n        {detailElem}\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query WorkBySlug($slug: String!) {\n    worksJson(fields: { slug: { eq: $slug } }) {\n      title\n      desc\n      tags\n      tools\n      date(formatString: \"MMMM DD, YYYY\")\n      images\n      link\n      blog\n      youtube\n    }\n  }\n`;\n"],"sourceRoot":""}